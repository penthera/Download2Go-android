package com.penthera.download2goandroidx

import android.annotation.SuppressLint
import android.os.Bundle
import android.view.View
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.LiveData
import com.penthera.common.Common.AssetStatus
import com.penthera.common.Common.AuthenticationStatus
import com.penthera.download2goandroidx.databinding.ActivityMainBinding
import com.penthera.virtuososdk.Common
import com.penthera.virtuososdk.androidxsupport.SegmentedAssetLiveData
import com.penthera.virtuososdk.androidxsupport.VirtuosoLiveDataFactory
import com.penthera.virtuososdk.client.*
import com.penthera.virtuososdk.client.builders.HLSAssetBuilder
import java.net.URL
import java.util.*

class MainActivity : AppCompatActivity() {

    private lateinit var binding : ActivityMainBinding
    private lateinit var virtuosoLiveDataFactory: VirtuosoLiveDataFactory
    private lateinit var  virtuoso : Virtuoso
    private var asset : IAsset? =  null
    private var segmentedAssetLiveData : SegmentedAssetLiveData? = null



    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        virtuosoLiveDataFactory = VirtuosoLiveDataFactory.getInstance()
        virtuoso = virtuosoLiveDataFactory.createVirtuosoWithLifecycle(this, this)

        val engineStatus: LiveData<Int> = virtuosoLiveDataFactory.engineStatus
        engineStatus.observe(this,
            { statusVal: Int? ->
                binding.engineStatusView.text =
                    getString(
                        R.string.engine_status, getStatusString(
                            statusVal!!
                        )

                    )
            })

        binding.download.setOnClickListener { downloadAsset() }
        binding.play.setOnClickListener { playAsset()}
        binding.delete.setOnClickListener { deleteAsset() }


        updateUI()
    }

    private fun initVirtuosoSDK() {
        //this is the current best practice for initializing the SDK
            val status = virtuoso.backplane?.authenticationStatus
            if(status != AuthenticationStatus.AUTHENTICATED){//if not authenticated execute sdk startup
                //here we use the simplest login with hard coded values

                virtuoso.startup(
                    URL(BACKPLANE_URL),//substitute the proper backplane url for you implementation
                    // substitute the proper backplane url for your implementation
                    UUID.randomUUID()
                        .toString(),    // provide an appropriate unique user id. A random uuid is used here for demonstration purposes only
                    null, //Optional additional device id to be associated with the user account.  This is not the device id generated by the virtuoso SDK
                    BACKPLANE_PUBLIC_KEY,//Penthera demo public key.  Substitute the correct one.
                    BACKPLANE_PRIVATE_KEY,
                    object : IPushRegistrationObserver {
                        override fun onServiceAvailabilityResponse(
                            pushService: Int,
                            errorCode: Int
                        ) {
                            //callback for push registration.  this will be detailed in subsequent tutorials
                        }
                    }
                )

            }


        // Load asset if it has already been downloaded
        loadAsset()
    }

    private fun loadAsset() {
        segmentedAssetLiveData?.removeObservers(this)
        segmentedAssetLiveData = virtuosoLiveDataFactory.getAssetStatus(ASSET_ID)
        segmentedAssetLiveData?.observe(this, { updatedAssetVal: ISegmentedAsset? ->
            asset = updatedAssetVal
            updateAssetUI()
        })
    }

    private fun updateUI() {
        binding.download.isEnabled = asset == null
        binding.play.isEnabled = asset != null
        binding.delete.isEnabled = asset != null
        if (asset == null) {
            binding.textView.text = ""
        }
    }

    private fun playAsset() {

        if(asset != null) {
            VideoPlayerActivity.playVideoDownload(asset!!, this)
        }

    }

    private fun deleteAsset() {
        virtuoso.assetManager.delete(asset)
        asset = null
        updateUI()
    }


    private fun downloadAsset(){
        initVirtuosoSDK()

        val params = HLSAssetBuilder().apply {
            assetId(ASSET_ID) //REQUIRED PARAMETER asset ID of the new asset
            manifestUrl(URL(ASSET_URL)) //REQUIRED PARAMETER  url of the new asset
            assetObserver(AssetParseObserver(this@MainActivity))//REQUIRED PARAMETER observer that will be notified of parsing status
            addToQueue(true) // add to the download queue after parsing complete
            desiredVideoBitrate(Integer.MAX_VALUE)//specify a bitrate for desired video quality Integer.MAX_VALUE for largest available
            withMetadata(ASSET_TITLE)//user specified descriptive text for the asset.  Here we supply a title.
        }.build()

        virtuoso.assetManager.createHLSSegmentedAssetAsync(params)

        loadAsset()
    }

    private fun updateAssetUI() {

        var progress: Int = -1
        var assetStatus = ""
        var value = ""
        var errorCount: Long = 0

        asset?.let {

            progress = (it.fractionComplete * 100.0).toInt()

            when (it.downloadStatus) {

                AssetStatus.DOWNLOADING -> {
                    assetStatus = getString(R.string.status_downloading)
                    value = getString(R.string.asset_status_downloading)
                }

                AssetStatus.DOWNLOAD_COMPLETE -> {
                    assetStatus = getString(R.string.status_downloaded)
                    value = getString(R.string.asset_status_complete)
                }

                AssetStatus.EXPIRED -> {
                    assetStatus = getString(R.string.status_expired)
                    value = getString(R.string.asset_status_expired)
                }

                AssetStatus.DOWNLOAD_DENIED_ASSET -> {
                    assetStatus = getString(R.string.status_queued)
                    value = getString(R.string.asset_status_denied_mad)
                }

                AssetStatus.DOWNLOAD_DENIED_ACCOUNT -> {
                    assetStatus = getString(R.string.status_queued)
                    value = getString(R.string.asset_status_denied_mda)
                }

                AssetStatus.DOWNLOAD_DENIED_EXTERNAL_POLICY -> {
                    assetStatus = getString(R.string.status_queued)
                    value = getString(R.string.asset_status_denied_ext)
                }

                AssetStatus.DOWNLOAD_DENIED_MAX_DEVICE_DOWNLOADS -> {
                    assetStatus = getString(R.string.status_queued)
                    value = getString(R.string.asset_status_denied_mpd)
                }

                AssetStatus.DOWNLOAD_BLOCKED_AWAITING_PERMISSION -> {
                    assetStatus = getString(R.string.status_queued)
                    value = getString(R.string.asset_status_await_permission)
                }

                AssetStatus.DOWNLOAD_DENIED_COPIES -> {
                    assetStatus = getString(R.string.status_queued)
                    value = getString(R.string.asset_status_denied_copies)
                }

                else -> {
                    assetStatus = getString(R.string.status_pending)
                    value = getString(R.string.asset_status_pending)
                }
            }

            errorCount = it.errorCount
        }

        updateUI()

        binding.textView.visibility = View.VISIBLE
        binding.textView.text = getString(R.string.asset_status, assetStatus, errorCount, value)

        // Tiny Progress
        if (progress == 0) progress = 1

        // Progress Bar
        if (progress in 1..99) {
            binding.progressBar.progress = progress
            binding.progressBar.visibility = View.VISIBLE
        } else {
            binding.progressBar.visibility = View.GONE
        }
    }

    class AssetParseObserver(activity: AppCompatActivity) : ISegmentedAssetFromParserObserver{

        private var mActivty : AppCompatActivity = activity

        @SuppressLint("ShowToast")
        override fun complete(asset: ISegmentedAsset?, error: Int, addedToQueue: Boolean) {

            if(asset != null){
               Toast.makeText(
                   mActivty,
                   "Asset parsed and " + if (addedToQueue) "added" else "not added" + "to download queue",
                   Toast.LENGTH_LONG
               ).show()

            }
            else{
                Toast.makeText(mActivty, "Error $error while parsing asset", Toast.LENGTH_LONG).show()
            }
        }
    }

    private fun getStatusString(engineStatus: Int): String? {
        val status: String
        status = when (engineStatus) {
            Common.EngineStatus.DOWNLOADING -> "Downloading"
            Common.EngineStatus.PAUSED -> "Paused"
            Common.EngineStatus.DISABLED -> "Download Disabled"
            Common.EngineStatus.BLOCKED -> "Blocked"
            Common.EngineStatus.ERROR -> "Errored"
            Common.EngineStatus.AUTH_FAILURE -> "Auth Failure"
            Common.EngineStatus.IDLE -> "Idle"
            else -> "Idle"
        }
        return status
    }

    companion object{
        // Important: Asset ID should be unique across your video catalog
        const val ASSET_ID : String = "TEST_ASSET_ID"
        const val ASSET_TITLE : String = "TEST ASSET"
        const val ASSET_URL: String = "http://virtuoso-demo-content.s3.amazonaws.com/Steve/steve.m3u8"

        const val BACKPLANE_URL = "https://demo.penthera.com"
        const val BACKPLANE_PUBLIC_KEY =  
        const val BACKPLANE_PRIVATE_KEY = 

    }
}
